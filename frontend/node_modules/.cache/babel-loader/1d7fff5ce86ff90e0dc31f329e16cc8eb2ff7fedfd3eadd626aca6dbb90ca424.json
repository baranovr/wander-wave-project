{"ast":null,"code":"import axiosInstance from './axiosInstance';\nimport { store } from '../app/store';\nimport { refreshToken } from '../features/authSlice';\nexport function setupAxiosInterceptors() {\n  axiosInstance.interceptors.request.use(config => {\n    const token = store.getState().auth.accessToken;\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  }, error => Promise.reject(error));\n  axiosInstance.interceptors.response.use(response => response, async error => {\n    var _error$response;\n    const originalRequest = error.config;\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        await store.dispatch(refreshToken());\n        const newToken = store.getState().auth.accessToken;\n        if (newToken) {\n          axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n          return axiosInstance(originalRequest);\n        }\n      } catch (refreshError) {\n        console.error('Failed to refresh token:', refreshError);\n      }\n    }\n    return Promise.reject(error);\n  });\n}","map":{"version":3,"names":["axiosInstance","store","refreshToken","setupAxiosInterceptors","interceptors","request","use","config","token","getState","auth","accessToken","headers","error","Promise","reject","response","_error$response","originalRequest","status","_retry","dispatch","newToken","defaults","common","refreshError","console"],"sources":["D:/pycharm_projects/wander-wave-project/frontend/src/api/axiosConfig.ts"],"sourcesContent":["import axiosInstance from './axiosInstance';\r\nimport { store } from '../app/store';\r\nimport { refreshToken } from '../features/authSlice';\r\n\r\nexport function setupAxiosInterceptors() {\r\n  axiosInstance.interceptors.request.use(\r\n    (config) => {\r\n      const token = store.getState().auth.accessToken;\r\n      if (token) {\r\n        config.headers['Authorization'] = `Bearer ${token}`;\r\n      }\r\n      return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n  );\r\n\r\n  axiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n      const originalRequest = error.config;\r\n      if (error.response?.status === 401 && !originalRequest._retry) {\r\n        originalRequest._retry = true;\r\n        try {\r\n          await store.dispatch(refreshToken());\r\n          const newToken = store.getState().auth.accessToken;\r\n          if (newToken) {\r\n            axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\r\n            return axiosInstance(originalRequest);\r\n          }\r\n        } catch (refreshError) {\r\n          console.error('Failed to refresh token:', refreshError);\r\n        }\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n}\r\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,iBAAiB;AAC3C,SAASC,KAAK,QAAQ,cAAc;AACpC,SAASC,YAAY,QAAQ,uBAAuB;AAEpD,OAAO,SAASC,sBAAsBA,CAAA,EAAG;EACvCH,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;IACV,MAAMC,KAAK,GAAGP,KAAK,CAACQ,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACC,WAAW;IAC/C,IAAIH,KAAK,EAAE;MACTD,MAAM,CAACK,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUJ,KAAK,EAAE;IACrD;IACA,OAAOD,MAAM;EACf,CAAC,EACAM,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;EAEDb,aAAa,CAACI,YAAY,CAACY,QAAQ,CAACV,GAAG,CACpCU,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;IAAA,IAAAI,eAAA;IACf,MAAMC,eAAe,GAAGL,KAAK,CAACN,MAAM;IACpC,IAAI,EAAAU,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;MAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;MAC7B,IAAI;QACF,MAAMnB,KAAK,CAACoB,QAAQ,CAACnB,YAAY,CAAC,CAAC,CAAC;QACpC,MAAMoB,QAAQ,GAAGrB,KAAK,CAACQ,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACC,WAAW;QAClD,IAAIW,QAAQ,EAAE;UACZtB,aAAa,CAACuB,QAAQ,CAACX,OAAO,CAACY,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUF,QAAQ,EAAE;UAC7E,OAAOtB,aAAa,CAACkB,eAAe,CAAC;QACvC;MACF,CAAC,CAAC,OAAOO,YAAY,EAAE;QACrBC,OAAO,CAACb,KAAK,CAAC,0BAA0B,EAAEY,YAAY,CAAC;MACzD;IACF;IACA,OAAOX,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAC9B,CACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}