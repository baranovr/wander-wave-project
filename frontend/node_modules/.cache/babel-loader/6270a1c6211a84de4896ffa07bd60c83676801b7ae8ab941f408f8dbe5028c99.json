{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  notifications: [],\n  status: 'idle',\n  error: null\n};\nexport const fetchAllNotifications = createAsyncThunk('notifications/fetchAllNotifications', async () => {\n  const [subscriptionResponse, postResponse, likeResponse, commentResponse] = await Promise.all([axios.get('http://127.0.0.1:8080/api/platform/subscription_notifications/'), axios.get('http://127.0.0.1:8080/api/platform/post_notifications/'), axios.get('http://127.0.0.1:8080/api/platform/like_notifications/'), axios.get('http://127.0.0.1:8080/api/platform/comment_notifications/')]);\n  return [...subscriptionResponse.data, ...postResponse.data, ...likeResponse.data, ...commentResponse.data];\n});\nexport const markNotificationAsRead = createAsyncThunk('notifications/markNotificationAsRead', async ({\n  id,\n  text\n}) => {\n  let type = '';\n  if (text.includes('subscribed')) {\n    type = 'subscription';\n  }\n  if (text.includes('published')) {\n    type = 'post';\n  }\n  if (text.includes('liked')) {\n    type = 'like';\n  }\n  if (text.includes('commented')) {\n    type = 'comment';\n  }\n  const response = await axios.post(`/api/platform/${type}_notifications/${id}/mark_as_read/`);\n  return {\n    id,\n    text,\n    ...response.data\n  };\n});\nexport const markAllNotificationsAsRead = createAsyncThunk('notifications/markAllNotificationsAsRead', async () => {\n  await Promise.all([axios.post('/api/platform/subscription_notifications/mark_all_as_read/'), axios.post('/api/platform/post_notifications/mark_all_as_read/'), axios.post('/api/platform/like_notifications/mark_all_as_read/'), axios.post('/api/platform/comment_notifications/mark_all_as_read/')]);\n});\nexport const deleteNotification = createAsyncThunk('notifications/deleteNotification', async ({\n  id,\n  text\n}) => {\n  let type = '';\n  if (text.includes('subscribed')) {\n    type = 'subscription';\n  }\n  if (text.includes('published')) {\n    type = 'post';\n  }\n  if (text.includes('liked')) {\n    type = 'like';\n  }\n  if (text.includes('commented')) {\n    type = 'comment';\n  }\n  const response = await axios.delete(`/api/platform/${type}_notifications/${id}/delete_notification`);\n  return {\n    id,\n    text,\n    ...response.data\n  };\n});\nexport const deleteAllNotifications = createAsyncThunk('notifications/deleteAllNotifications', async () => {\n  await Promise.all([axios.post('/api/platform/subscription_notifications/delete_all_notifications'), axios.post('/api/platform/post_notifications/delete_all_notifications'), axios.post('/api/platform/like_notifications/delete_all_notifications'), axios.post('/api/platform/lcomment_notifications/delete_all_notifications')]);\n});\nexport const deleteAllCommentNotifications = createAsyncThunk('notifications/deleteAllCommentNotifications', async () => {\n  const response = await axios.post('/api/platform/comment_notifications/delete_all_notifications');\n  return response.data;\n});\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAllNotifications.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllNotifications.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.notifications = action.payload;\n    }).addCase(fetchAllNotifications.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(markNotificationAsRead.fulfilled, (state, action) => {\n      const {\n        id,\n        text\n      } = action.payload;\n      const notification = state.notifications.find(n => n.id === id && n.text === text);\n      if (notification) {\n        notification.is_read = true;\n      }\n    }).addCase(markAllNotificationsAsRead.fulfilled, state => {\n      state.notifications.forEach(notification => {\n        notification.is_read = true;\n      });\n    }).addCase(deleteNotification.fulfilled, (state, action) => {\n      const {\n        id,\n        text\n      } = action.payload;\n      state.notifications = state.notifications.filter(n => !(n.id === id && n.text === text));\n    }).addCase(deleteAllNotifications.fulfilled, state => {\n      state.notifications = [];\n    }).addMatcher(action => action.type.startsWith('notifications/') && action.type.endsWith('/pending'), state => {\n      state.status = 'loading';\n    }).addMatcher(action => action.type.startsWith('notifications/') && action.type.endsWith('/rejected'), state => {\n      state.status = 'failed';\n      state.error = 'Failed to fetch user notifications';\n    }).addMatcher(action => action.type.startsWith('notifications/') && action.type.endsWith('/fulfilled'), state => {\n      state.status = 'succeeded';\n    });\n  }\n});\nexport default notificationsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","notifications","status","error","fetchAllNotifications","subscriptionResponse","postResponse","likeResponse","commentResponse","Promise","all","get","data","markNotificationAsRead","id","text","type","includes","response","post","markAllNotificationsAsRead","deleteNotification","delete","deleteAllNotifications","deleteAllCommentNotifications","notificationsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","notification","find","n","is_read","forEach","filter","addMatcher","startsWith","endsWith","reducer"],"sources":["D:/pycharm_projects/wander-wave-project/frontend/src/features/notificationsSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { Notification } from '../types/Notification';\r\n\r\ntype NotificationState = {\r\n  notifications: Notification[];\r\n  status: string;\r\n  error: any;\r\n};\r\n\r\nconst initialState: NotificationState = {\r\n  notifications: [],\r\n  status: 'idle',\r\n  error: null,\r\n};\r\n\r\nexport const fetchAllNotifications = createAsyncThunk(\r\n  'notifications/fetchAllNotifications',\r\n  async () => {\r\n    const [subscriptionResponse, postResponse, likeResponse, commentResponse] =\r\n      await Promise.all([\r\n        axios.get('http://127.0.0.1:8080/api/platform/subscription_notifications/'),\r\n        axios.get('http://127.0.0.1:8080/api/platform/post_notifications/'),\r\n        axios.get('http://127.0.0.1:8080/api/platform/like_notifications/'),\r\n        axios.get('http://127.0.0.1:8080/api/platform/comment_notifications/'),\r\n      ]);\r\n\r\n    return [\r\n      ...subscriptionResponse.data,\r\n      ...postResponse.data,\r\n      ...likeResponse.data,\r\n      ...commentResponse.data,\r\n    ];\r\n  },\r\n);\r\n\r\nexport const markNotificationAsRead = createAsyncThunk(\r\n  'notifications/markNotificationAsRead',\r\n  async ({ id, text }: { id: number; text: string }) => {\r\n    let type = '';\r\n\r\n    if (text.includes('subscribed')) {\r\n      type = 'subscription';\r\n    }\r\n\r\n    if (text.includes('published')) {\r\n      type = 'post';\r\n    }\r\n\r\n    if (text.includes('liked')) {\r\n      type = 'like';\r\n    }\r\n    if (text.includes('commented')) {\r\n      type = 'comment';\r\n    }\r\n\r\n    const response = await axios.post(\r\n      `/api/platform/${type}_notifications/${id}/mark_as_read/`,\r\n    );\r\n    return { id, text, ...response.data };\r\n  },\r\n);\r\n\r\nexport const markAllNotificationsAsRead = createAsyncThunk(\r\n  'notifications/markAllNotificationsAsRead',\r\n  async () => {\r\n    await Promise.all([\r\n      axios.post('/api/platform/subscription_notifications/mark_all_as_read/'),\r\n      axios.post('/api/platform/post_notifications/mark_all_as_read/'),\r\n      axios.post('/api/platform/like_notifications/mark_all_as_read/'),\r\n      axios.post('/api/platform/comment_notifications/mark_all_as_read/'),\r\n    ]);\r\n  },\r\n);\r\n\r\nexport const deleteNotification = createAsyncThunk(\r\n  'notifications/deleteNotification',\r\n  async ({ id, text }: { id: number; text: string }) => {\r\n    let type = '';\r\n\r\n    if (text.includes('subscribed')) {\r\n      type = 'subscription';\r\n    }\r\n\r\n    if (text.includes('published')) {\r\n      type = 'post';\r\n    }\r\n\r\n    if (text.includes('liked')) {\r\n      type = 'like';\r\n    }\r\n    if (text.includes('commented')) {\r\n      type = 'comment';\r\n    }\r\n    const response = await axios.delete(\r\n      `/api/platform/${type}_notifications/${id}/delete_notification`,\r\n    );\r\n    return { id, text, ...response.data };\r\n  },\r\n);\r\n\r\nexport const deleteAllNotifications = createAsyncThunk(\r\n  'notifications/deleteAllNotifications',\r\n  async () => {\r\n    await Promise.all([\r\n      axios.post(\r\n        '/api/platform/subscription_notifications/delete_all_notifications',\r\n      ),\r\n      axios.post('/api/platform/post_notifications/delete_all_notifications'),\r\n      axios.post('/api/platform/like_notifications/delete_all_notifications'),\r\n      axios.post(\r\n        '/api/platform/lcomment_notifications/delete_all_notifications',\r\n      ),\r\n    ]);\r\n  },\r\n);\r\n\r\nexport const deleteAllCommentNotifications = createAsyncThunk(\r\n  'notifications/deleteAllCommentNotifications',\r\n  async () => {\r\n    const response = await axios.post(\r\n      '/api/platform/comment_notifications/delete_all_notifications',\r\n    );\r\n    return response.data;\r\n  },\r\n);\r\n\r\nconst notificationsSlice = createSlice({\r\n  name: 'notifications',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: builder => {\r\n    builder\r\n      .addCase(fetchAllNotifications.pending, state => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchAllNotifications.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.notifications = action.payload;\r\n      })\r\n      .addCase(fetchAllNotifications.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(markNotificationAsRead.fulfilled, (state, action) => {\r\n        const { id, text } = action.payload;\r\n        const notification = state.notifications.find(\r\n          n => n.id === id && n.text === text,\r\n        );\r\n        if (notification) {\r\n          notification.is_read = true;\r\n        }\r\n      })\r\n      .addCase(markAllNotificationsAsRead.fulfilled, state => {\r\n        state.notifications.forEach(notification => {\r\n          notification.is_read = true;\r\n        });\r\n      })\r\n      .addCase(deleteNotification.fulfilled, (state, action) => {\r\n        const { id, text } = action.payload;\r\n        state.notifications = state.notifications.filter(\r\n          n => !(n.id === id && n.text === text),\r\n        );\r\n      })\r\n      .addCase(deleteAllNotifications.fulfilled, state => {\r\n        state.notifications = [];\r\n      })\r\n      .addMatcher(\r\n        action =>\r\n          action.type.startsWith('notifications/') &&\r\n          action.type.endsWith('/pending'),\r\n        state => {\r\n          state.status = 'loading';\r\n        },\r\n      )\r\n      .addMatcher(\r\n        action =>\r\n          action.type.startsWith('notifications/') &&\r\n          action.type.endsWith('/rejected'),\r\n        state => {\r\n          state.status = 'failed';\r\n          state.error = 'Failed to fetch user notifications';\r\n        },\r\n      )\r\n      .addMatcher(\r\n        action =>\r\n          action.type.startsWith('notifications/') &&\r\n          action.type.endsWith('/fulfilled'),\r\n        state => {\r\n          state.status = 'succeeded';\r\n        },\r\n      );\r\n  },\r\n});\r\n\r\nexport default notificationsSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}