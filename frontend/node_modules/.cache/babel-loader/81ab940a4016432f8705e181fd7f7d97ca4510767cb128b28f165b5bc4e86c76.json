{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rusip\\\\wander-wave-project\\\\frontend\\\\src\\\\components\\\\TextGradient\\\\TextGradient.tsx\",\n  _s = $RefreshSig$();\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useRef, useEffect, useState } from 'react';\nimport './TextGradient.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TextGradient = ({\n  countTo,\n  duration = 3000\n}) => {\n  _s();\n  const [count, setCount] = useState(0);\n  const countRef = useRef(null);\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          startCounting();\n          observer.unobserve(entry.target);\n        }\n      });\n    }, {\n      threshold: 0.5\n    });\n    if (countRef.current) {\n      observer.observe(countRef.current);\n    }\n    return () => {\n      if (countRef.current) {\n        observer.unobserve(countRef.current);\n      }\n    };\n  }, []);\n  const startCounting = () => {\n    let start = 0;\n    const end = countTo;\n    const increment = end / (duration / 1000 * 60);\n    const stepTime = Math.abs(Math.floor(duration / (end / increment)));\n    const timer = setInterval(() => {\n      start += increment;\n      if (start >= end) {\n        clearInterval(timer);\n        start = end;\n      }\n      setCount(Math.round(start));\n    }, stepTime);\n    return () => {\n      clearInterval(timer);\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"text-gradient text-primary\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      ref: countRef,\n      id: \"state1\",\n      children: [count, \"+\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(TextGradient, \"9J2coKEl0egZQ7dp/8K3YsPbcWs=\");\n_c = TextGradient;\nvar _c;\n$RefreshReg$(_c, \"TextGradient\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","TextGradient","countTo","duration","_s","count","setCount","countRef","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","startCounting","unobserve","target","threshold","current","observe","start","end","increment","stepTime","Math","abs","floor","timer","setInterval","clearInterval","round","className","children","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rusip/wander-wave-project/frontend/src/components/TextGradient/TextGradient.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport './TextGradient.scss';\r\n\r\ninterface TextGradientCounterProps {\r\n  countTo: number;\r\n  duration?: number;\r\n}\r\n\r\nexport const TextGradient: React.FC<TextGradientCounterProps> = ({\r\n  countTo,\r\n  duration = 3000,\r\n}) => {\r\n  const [count, setCount] = useState(0);\r\n  const countRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      entries => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting) {\r\n            startCounting();\r\n            observer.unobserve(entry.target);\r\n          }\r\n        });\r\n      },\r\n      { threshold: 0.5 },\r\n    );\r\n\r\n    if (countRef.current) {\r\n      observer.observe(countRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (countRef.current) {\r\n        observer.unobserve(countRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const startCounting = () => {\r\n    let start = 0;\r\n    const end = countTo;\r\n    const increment = end / ((duration / 1000) * 60);\r\n    const stepTime = Math.abs(Math.floor(duration / (end / increment)));\r\n\r\n    const timer = setInterval(() => {\r\n      start += increment;\r\n      if (start >= end) {\r\n        clearInterval(timer);\r\n        start = end;\r\n      }\r\n      setCount(Math.round(start));\r\n    }, stepTime);\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <h1 className=\"text-gradient text-primary\">\r\n      <span ref={countRef} id=\"state1\">\r\n        {count}+\r\n      </span>\r\n    </h1>\r\n  );\r\n};\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO7B,OAAO,MAAMC,YAAgD,GAAGA,CAAC;EAC/DC,OAAO;EACPC,QAAQ,GAAG;AACb,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMS,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;EAE7BC,SAAS,CAAC,MAAM;IACd,MAAMW,QAAQ,GAAG,IAAIC,oBAAoB,CACvCC,OAAO,IAAI;MACTA,OAAO,CAACC,OAAO,CAACC,KAAK,IAAI;QACvB,IAAIA,KAAK,CAACC,cAAc,EAAE;UACxBC,aAAa,CAAC,CAAC;UACfN,QAAQ,CAACO,SAAS,CAACH,KAAK,CAACI,MAAM,CAAC;QAClC;MACF,CAAC,CAAC;IACJ,CAAC,EACD;MAAEC,SAAS,EAAE;IAAI,CACnB,CAAC;IAED,IAAIV,QAAQ,CAACW,OAAO,EAAE;MACpBV,QAAQ,CAACW,OAAO,CAACZ,QAAQ,CAACW,OAAO,CAAC;IACpC;IAEA,OAAO,MAAM;MACX,IAAIX,QAAQ,CAACW,OAAO,EAAE;QACpBV,QAAQ,CAACO,SAAS,CAACR,QAAQ,CAACW,OAAO,CAAC;MACtC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMJ,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIM,KAAK,GAAG,CAAC;IACb,MAAMC,GAAG,GAAGnB,OAAO;IACnB,MAAMoB,SAAS,GAAGD,GAAG,IAAKlB,QAAQ,GAAG,IAAI,GAAI,EAAE,CAAC;IAChD,MAAMoB,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,KAAK,CAACvB,QAAQ,IAAIkB,GAAG,GAAGC,SAAS,CAAC,CAAC,CAAC;IAEnE,MAAMK,KAAK,GAAGC,WAAW,CAAC,MAAM;MAC9BR,KAAK,IAAIE,SAAS;MAClB,IAAIF,KAAK,IAAIC,GAAG,EAAE;QAChBQ,aAAa,CAACF,KAAK,CAAC;QACpBP,KAAK,GAAGC,GAAG;MACb;MACAf,QAAQ,CAACkB,IAAI,CAACM,KAAK,CAACV,KAAK,CAAC,CAAC;IAC7B,CAAC,EAAEG,QAAQ,CAAC;IAEZ,OAAO,MAAM;MACXM,aAAa,CAACF,KAAK,CAAC;IACtB,CAAC;EACH,CAAC;EAED,oBACE3B,OAAA;IAAI+B,SAAS,EAAC,4BAA4B;IAAAC,QAAA,eACxChC,OAAA;MAAMiC,GAAG,EAAE1B,QAAS;MAAC2B,EAAE,EAAC,QAAQ;MAAAF,QAAA,GAC7B3B,KAAK,EAAC,GACT;IAAA;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAET,CAAC;AAAClC,EAAA,CA1DWH,YAAgD;AAAAsC,EAAA,GAAhDtC,YAAgD;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}